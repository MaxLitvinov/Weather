plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.dagger.hilt.android'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
}
apply from: '../dependencies.gradle'

int appPhase = 1
int feature = 0
int fixes = 0
def buildVersion = String.format("%d.%d", appPhase, feature)
if (fixes > 0) {
    buildVersion = String.format("%s.%d", buildVersion, fixes)
}

android {
    namespace 'com.weather'
    compileSdk rootProject.compileSdkVersion

    defaultConfig {
        applicationId "com.weather"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode 1
        versionName buildVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file("keys/weather_debug.key")
            storePassword "HlQq&sxu7^gISn9kNUno7SnG4gyUKN6Y"
            keyAlias "weather-debug-key"
            keyPassword "HlQq&sxu7^gISn9kNUno7SnG4gyUKN6Y"
        }
        release {
            storeFile file("keys/weather_release.key")
            storePassword "0H@V3*mNI4AKV1DpL&5uksbFNJ89O@ct"
            keyAlias "weather-release-key"
            keyPassword "0H@V3*mNI4AKV1DpL&5uksbFNJ89O@ct"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            manifestPlaceholders = [
                    appNameSuffix                          : "_debug",
                    firebase_performance_logcat_enabled    : "false",
                    firebase_crashlytics_collection_enabled: "false"
            ]
            FirebasePerformance {
                // Set this flag to 'false' to disable @AddTrace annotation processing and
                // automatic monitoring of HTTP/S network requests
                // for a specific build variant at compile time.
                // https://firebase.google.com/docs/perf-mon/disable-sdk?platform=android#extension-property-flag
                instrumentationEnabled false
            }

            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [
                    appNameSuffix                          : "",
                    firebase_performance_logcat_enabled    : "true",
                    firebase_crashlytics_collection_enabled: "true"
            ]
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility environment.java_version
        targetCompatibility environment.java_version
    }
    // Allow references to generated code
    kapt {
        correctErrorTypes true
    }
    kotlinOptions {
        jvmTarget = environment.java_version
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            pickFirsts += ['META-INF/LICENSE.md', 'META-INF/LICENSE-notice.md']
        }
    }
    applicationVariants.all { variant ->
        renameApk(variant)
    }
}

def renameApk(variant) {
    variant.outputs.each { output ->
        variant.outputs.all {
            def versionName = variant.versionName
            def hashCode = getCommitHashCode()
            outputFileName = "Weather_${versionName}-${hashCode}.apk"
        }
    }
}

def getCommitHashCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

dependencies {

    implementation platform(deps.app.google.firebase.bom)

    implementation project(':feature:home_page')
    implementation project(':foundation:dialog')
    implementation project(':foundation:resources')
    implementation project(':service:logger')

    implementation deps.app.androidx.appcompat
    implementation deps.app.androidx.core_ktx
    implementation deps.app.androidx.core_splashscreen
    implementation deps.app.androidx.constraintlayout
    implementation deps.app.androidx.navigation_fragment_ktx
    implementation deps.app.androidx.navigation_ui_ktx

    implementation deps.app.google.firebase.analytics_ktx
    implementation deps.app.google.firebase.crashlytics_ktx
    implementation deps.app.google.firebase.perf_ktx

    implementation deps.app.google.hilt_android
    kapt deps.app.google.hilt_compiler

    implementation deps.app.material

    testImplementation deps.test.junit
    androidTestImplementation deps.test.junit_ext
    androidTestImplementation deps.test.espresso_core
}